<?xml version="1.0"?>

<ruleset name="Extra Rules 1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
The Basic Ruleset contains a collection of good practices which everyone should follow.
  </description>

    <rule name="EmptyCatchBlock"
          language="java"
          message="Avoid empty catch blocks"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
  Empty Catch Block finds instances where an exception is caught, but nothing is done.  In most circumstances, this swallows an exception
  which should either be acted on or reported.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//CatchStatement
 [count(Block/BlockStatement) = 0]
 [FormalParameter/Type/ReferenceType
   /ClassOrInterfaceType[@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException']
 ]
 ]]>
             </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public void doSomething() {
      try {
        FileInputStream fis = new FileInputStream("/tmp/bugger");
      } catch (IOException ioe) {
          // not good
      }
    }]]>
      </example>
    </rule>

    <rule name="EmptyIfStmt"
    	  language="java"
          message="Avoid empty 'if' statements"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
  Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
        <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//IfStatement/Statement/Block[count(*) = 0]]]>
              </value>
          </property>
      </properties>
      <example>
    <![CDATA[if (foo == 0) {
       // why bother checking up on foo?
    }]]>
       </example>
    </rule>


    <rule name="EmptyWhileStmt"
          language="java"
          message="Avoid empty 'while' statements"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
       <description>
  Empty While Statement finds all instances where a while statement does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
  it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
                  //WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

       <example>
  <![CDATA[while (a == b) {
    // not good
  }]]>
       </example>
    </rule>


    <rule name="EmptyTryBlock"
          language="java"
          message="Avoid empty try blocks"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Avoid empty try blocks, they serve no purpose.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//TryStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
      } catch (Exception e) {
          e.printStackTrace();
      }
  }]]>
      </example>
    </rule>

    <rule name="EmptyFinallyBlock"
    	  language="java"
          message="Avoid empty finally blocks"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Avoid empty finally blocks, these can be deleted.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//FinallyStatement[count(Block/BlockStatement) = 0]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
          int x=2;
      } finally {
      }
  }]]>
      </example>
    </rule>


    <rule name="EmptySwitchStatements"
    	  language="java"
          message="Avoid empty switch statements"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Avoid empty switch statements.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SwitchStatement[count(*) = 1]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public class Foo {
   public void bar() {
    int x = 2;
    switch (x) {
     // once there was code here
     // but it's been commented out or something
    }
   }
  }]]>
      </example>
      </rule>


    <rule name="JumbledIncrementer"
    	  language="java"
         message="Avoid modifying an outer loop incrementer in an inner loop for update expression"
         class="net.sourceforge.pmd.lang.rule.XPathRule">
     <description>
Avoid jumbled loop incrementers as these are usually a mistake and can make code maintenance difficult.
     </description>
     <properties>
         <property name="xpath">
             <value>
 <![CDATA[//ForStatement
 [
  ForUpdate/StatementExpressionList/StatementExpression/PostfixExpression/PrimaryExpression/PrimaryPrefix/Name/@Image
  =
  ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image
 ]]]>
             </value>
         </property>
     </properties>
        <priority>3</priority>

     <example>
 <![CDATA[public class JumbledIncrementerRule1 {
  public void foo() {
   for (int i = 0; i < 10; i++) {
    for (int k = 0; k < 20; i++) {
     System.out.println("Hello");
    }
   }
  }
 }]]>
     </example>
     </rule>


    <rule name="ForLoopShouldBeWhileLoop"
    	  language="java"
          message="This for loop could be simplified to a while loop"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Some for loops can be simplified to while loops - this makes them more concise.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
 //ForStatement
  [count(*) > 1]
  [not(ForInit)]
  [not(ForUpdate)]
  [not(Type and Expression and Statement)]
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          for (;true;) true; // No Init or Update part, may as well be: while (true)
      }
  }]]>
      </example>
    </rule>


    <rule name="UnnecessaryConversionTemporary"
          message="Avoid unnecessary temporaries when converting primitives to Strings"
          class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryConversionTemporaryRule">
      <description>
Avoid unnecessary temporaries when converting primitives to Strings
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[public String convert(int x) {
      // this wastes an object
      String foo = new Integer(x).toString();
      // this is better
      return Integer.toString(x);
    }]]>
      </example>
    </rule>

    <rule name="OverrideBothEqualsAndHashcode"
    	  language="java"
          message="Ensure you override both equals() and hashCode()"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='false']//MethodDeclarator
[(@Image = 'equals' and count(FormalParameters/*) = 1
and not(//MethodDeclarator[count(FormalParameters/*) = 0][@Image = 'hashCode']))
or
(@Image='hashCode' and count(FormalParameters/*) = 0
and
not
(//MethodDeclarator
 [count(
   FormalParameters//Type/ReferenceType/ClassOrInterfaceType
    [@Image = 'Object' or @Image = 'java.lang.Object']) = 1]
    [@Image = 'equals']))]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public class Bar {
      public boolean equals(Object o) {
          // do some comparison
      }
  }

  // and so is this
  public class Baz {
      public int hashCode() {
          // return some hash value
      }
  }

  // this is OK
  public class Foo {
      public boolean equals(Object other) {
          // do some comparison
      }
      public int hashCode() {
          // return some hash value
      }
  }]]>
      </example>
    </rule>

    <rule name="DoubleCheckedLocking"
          message="Double checked locking is not thread safe in Java."
          class="net.sourceforge.pmd.lang.java.rule.basic.DoubleCheckedLockingRule">
      <description>
Partially created objects can be returned by the Double Checked Locking pattern when used in Java.
An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to.  
For more details see http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html.
      </description>
        <priority>1</priority>
      <example>
  <![CDATA[public class Foo {
      Object baz;
      Object bar() {
        if(baz == null) { //baz may be non-null yet not fully created
          synchronized(this){
            if(baz == null){
              baz = new Object();
            }
          }
        }
        return baz;
      }
  }]]>
      </example>
    </rule>

    <rule name="ReturnFromFinallyBlock"
    	  language="java"
          message="Avoid returning from a finally block"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
 Avoid returning from a finally block, this can discard exceptions.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
 //FinallyStatement//ReturnStatement
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public class Bar {
 public String bugga() {
  try {
   throw new Exception( "My Exception" );
  } catch (Exception e) {
   throw e;
  } finally {
   return "A. O. K."; // Very bad.
  }
 }
}]]>
      </example>
    </rule>

    <rule name="EmptySynchronizedBlock"
    	  language="java"
          message="Avoid empty synchronized blocks"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Avoid empty synchronized blocks as they do nothing.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SynchronizedStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      synchronized (this) {}
  }]]>
      </example>
    </rule>

    <rule name="UnnecessaryReturn"
    	  language="java"
          message="Avoid unnecessary return statements"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Avoid unnecessary return statements.
      </description>
      <properties>
          <property name="xpath">
              <value>
 <![CDATA[//ReturnStatement
 [parent::Statement
  [parent::BlockStatement
   [parent::Block
    [parent::MethodDeclaration/ResultType[@Void='true']
    ]
   ]
  ] ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      int x = 42;
      return;
  }]]>
      </example>
    </rule>


    <rule name="EmptyStaticInitializer"
    	  language="java"
           message="Empty static initializer was found"
           class="net.sourceforge.pmd.lang.rule.XPathRule">
       <description>
       An empty static initializer was found.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[//ClassOrInterfaceBodyDeclaration/Initializer[@Static='true']/Block[count(*)=0]]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[public class Foo {
  // why are there no statements in this static block?
  static {}
 }]]>
       </example>
     </rule>

    <rule name="UnconditionalIfStatement"
       language="java"
       message="Do not use 'if' statements that are always true or always false"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Do not use "if" statements that are always true or always false.
      </description>
        <properties>
            <property name="xpath">
                <value>
 <![CDATA[//IfStatement/Expression
 [count(PrimaryExpression)=1]
 /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
 public void close() {
  if (true) {
       // ...
   }
 }
}]]>
      </example>
    </rule>

    <rule name="EmptyStatementNotInLoop"
          language="java"
          message="An empty statement (semicolon) not part of a loop"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
       <description>
An empty statement (aka a semicolon by itself) that is not used as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be removed.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
//Statement/EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[public class MyClass {
   public void doit()
   {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
   }
}]]>
       </example>
     </rule>

    <rule name="BooleanInstantiation"
       language="java"
       message="Avoid instantiating Boolean objects; you can usually invoke Boolean.TRUE instead."
       class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
Avoid instantiating Boolean objects, instead use Boolean.TRUE or Boolean.FALSE.
   </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//PrimaryExpression
[
PrimaryPrefix/AllocationExpression[not (ArrayDimsAndInits) and (ClassOrInterfaceType/@Image='Boolean' or ClassOrInterfaceType/@Image='java.lang.Boolean')]
or
(
PrimaryPrefix/Name[@Image='Boolean.valueOf']
and
PrimarySuffix/Arguments//BooleanLiteral
)
]
]]>
              </value>
          </property>
      </properties>
      <priority>2</priority>
   <example>
   <![CDATA[
public class Foo {
 private Boolean bar = new Boolean("true"); // just do a Boolean bar = Boolean.TRUE;
}
   ]]>
   </example>
   </rule>

    <rule name="UnnecessaryFinalModifier"
          language="java"
          message="Unnecessary final modifier in final class"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
  When a class has the final modifier, all the methods are marked finally.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//ClassOrInterfaceDeclaration[@Final='true' and @Interface='false']
/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
public final class Foo {

    // This final modifier is not necessary, since the class is final
    // and thus, all methods are final
	private final void foo() {
	}

}

]]>
      </example>
    </rule>

    <rule name="CollapsibleIfStatements"
          language="java"
          message="These nested if statements could be combined"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//IfStatement[@Else='false']/Statement
 /IfStatement[@Else='false']
 |
//IfStatement[@Else='false']/Statement
 /Block[count(BlockStatement)=1]/BlockStatement
  /Statement/IfStatement[@Else='false']]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          if (x) {
           if (y) {
             // do stuff
           }
          }
      }
  }]]>
      </example>
    </rule>
    
</ruleset>
