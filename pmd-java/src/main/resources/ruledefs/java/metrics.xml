<?xml version="1.0"?>

<ruleset name="Metrics temporary ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/3.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/3.0.0 http://pmd.sourceforge.net/ruleset_3_0_0.xsd">

    <description>
        These are rules which use the Metrics Framework to calculate metrics.
    </description>

    <rule name="CyclomaticComplexity"
          message="The {0} ''{1}'' has a{2} cyclomatic complexity of {3}."
          since="1.03"
          class="net.sourceforge.pmd.lang.java.metrics.rule.CyclomaticComplexityRule"
          metrics="true"
          externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_metrics.html#cyclomaticcomplexity">
        <description><![CDATA[
            The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic
            in a single method makes its behaviour hard to read and change.

            Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,
            plus one for the method entry. Decision points are places where the control flow jumps to another place in the
            program. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more
            details on the calculation, see the documentation of the [Cyclo metric](/pmd_java_metrics_index.html#cyclomatic-complexity-cyclo).

            Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
            high complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.
            Additionnally, classes with many methods of moderate complexity get reported as well once the total of their
            methods' complexities reaches 80, even if none of the methods was directly reported.

            Reported methods should be broken down into several smaller methods. Reported classes should probably be broken down
            into subcomponents.]]>
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
class Foo {
  void baseCyclo() {                // Cyclo = 1
    highCyclo();
  }

  void highCyclo() {                // Cyclo = 10: reported!
    int x = 0, y = 2;
    boolean a = false, b = true;

    if (a && (y == 1 ? b : true)) { // +3
      if (y == x) {                 // +1
        while (true) {              // +1
          if (x++ < 20) {           // +1
            break;                  // +1
          }
        }
      } else if (y == t && !d) {    // +2
        x = a ? y : x;              // +1
      } else {
        x = 2;
      }
    }
  }
}
]]>
        </example>
    </rule>

    <rule name="NPathComplexity"
          since="3.9"
          message="The {0} ''{1}'' has an NPath complexity of {2}"
          class="net.sourceforge.pmd.lang.java.metrics.rule.NPathComplexityRule"
          metrics="true"
          externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_metrics.html#NPathComplexity">
        <description>
            The NPath complexity of a method is the number of acyclic execution paths through that method.
            While cyclomatic complexity counts the number of decision points in a method, NPath counts the number of
            full paths from the beginning to the end of the block of the method. That metric grows exponentially, as
            it multiplies the complexity of statements in the same block. For more details on the calculation, see the
            documentation of the [NPath metric](/pmd_java_metrics_index.html#npath-complexity-npath).

            A threshold of 200 is generally considered the point where measures should be taken to reduce
            complexity and increase readability.
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
  public static void bar() { // Ncss = 252: reported!
    boolean a, b = true;
    try { // 2 * 2 + 2 = 6
      if (true) { // 2
        List buz = new ArrayList();
      }

      for(int i = 0; i < 19; i++) { // * 2
        List buz = new ArrayList();
      }
    } catch(Exception e) {
      if (true) { // 2
        e.printStackTrace();
      }
    }

    while (j++ < 20) { //  * 2
      List buz = new ArrayList();
    }

    switch(j) { // * 7
      case 1:
      case 2: break;
      case 3: j = 5; break;
      case 4: if (b && a) { bar(); } break;
      default: break;
    }

    do { // * 3
        List buz = new ArrayList();
    } while (a && j++ < 30);
  }
}
 ]]>
        </example>
    </rule>

    <rule name="DataClass"
          since="6.0"
          message="The class ''{0}'' is suspected to be a Data Class (WOC={1}, NOPA={2}, NOAM={3}, WMC={4})"
          class="net.sourceforge.pmd.lang.java.metrics.rule.DataClassRule"
          metrics="true"
          externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_metrics.html#DataClass">
        <description>
            Data Classes are simple data holders, which reveal most of their state, and
            without complex functionality. The lack of functionality may indicate that
            their behaviour is defined elsewhere, which is a sign of poor data-behaviour
            proximity. By directly exposing their internals, Data Classes break encapsulation,
            and therefore reduce the system's maintainability and understandability. Moreover,
            classes tend to strongly rely on their data representation, which makes for a brittle
            design.

            Refactoring a Data Class should focus on restoring a good data-behaviour proximity. In
            most cases, that means moving the operations defined on the data back into the class.
            In some other cases it may make sense to remove entirely the class and move the data
            into the former client classes.
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class DataClass {

  public int bar = 0;
  public int na = 0;
  private int bee = 0;

  public void setBee(int n) {
    bee = n;
  }
}
 ]]>
        </example>
    </rule>


</ruleset>
