<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>simple failure</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>2</expected-linenumbers>
        <code><![CDATA[
public class Foo {
    Foo() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>only 'this(...)' is OK</description>
        <rule-property name="ignoreExplicitConstructorInvocation">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        this();
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>only 'this(...)' is not OK, if ignoring explicit constructor calls</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        this();
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>only 'super(...)' is OK</description>
        <rule-property name="ignoreExplicitConstructorInvocation">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        super();
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>single-line comment is OK</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        // Comment
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>multiple-line comment is OK</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        this();
        /* Comment */
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Javadoc comment is OK</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        super();
        /** Comment */
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>ok</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        int bar;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>with 'this(...)' ok</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        this();
        bar();
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>with 'super(...)' ok</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    Foo() {
        super();
        bar++;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>private is ok</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    private Foo() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Empty constructor with documenting javadoc still triggers</description>
        <rule-property name="ignoreExplicitConstructorInvocation">true</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class WebAgent {
    /**
     * <p>Instantiate a WebAgent.</p>
     * <p>Call {@link #configure configure()} before calling {@link #retrieve retrieve()}.</p>
     */
    public WebAgent() {}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#357 UncommentedEmptyConstructor consider annotations on Constructor</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import javax.inject.Inject;

public class MyClass {
    @Inject MyClass() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#357 UncommentedEmptyConstructor consider fully qualified annotations on Constructor</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class MyClass {
    @javax.inject.Inject MyClass() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#4141 UncommentedEmptyConstructor FP when annotated constructor with @Autowired</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.springframework.beans.factory.annotation.Autowired;
public class Bug {
    @Autowired
    public Bug() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#4141 UncommentedEmptyConstructor FP when annotated constructor with @Autowired</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Bug {
    @org.springframework.beans.factory.annotation.Autowired
    public Bug() {
    }
}
        ]]></code>
    </test-code>

</test-data>
