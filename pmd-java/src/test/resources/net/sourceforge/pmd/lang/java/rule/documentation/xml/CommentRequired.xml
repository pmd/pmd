<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <code-fragment id="with-all-comments"><![CDATA[
/**
 * Class level comment.
 */
public class Foo {
    /** the bar counter. */
    public int bar;
    /** the test enum. */
    public enum Enum {}
    /**
    * This is the comment for the constructor
    */
    public Foo() {}
    /**
    * This is the comment for the first method
    */
    public void doNothing() {}
    /**
    * This is the comment for the second method
    */
    public void doSomething() {}
}
    ]]></code-fragment>

    <code-fragment id="without-any-comments"><![CDATA[
public class Foo {
    public int bar;
    public enum Enum {}
    public Foo() {}
    public void doNothing() {}
    public void doSomething() {}
}
    ]]></code-fragment>

    <test-code>
        <description>Missing comments - all required (default).</description>
        <expected-problems>6</expected-problems>
        <code-ref id="without-any-comments"/>
    </test-code>

    <test-code>
        <description>All elements have javadoc comments.</description>
        <expected-problems>0</expected-problems>
        <code-ref id="with-all-comments"/>
    </test-code>

    <test-code>
        <description>Missing comments - only class level required.</description>
        <rule-property name="classCommentRequirement">Required</rule-property>
        <rule-property name="fieldCommentRequirement">Ignored</rule-property>
        <rule-property name="publicMethodCommentRequirement">Ignored</rule-property>
        <rule-property name="protectedMethodCommentRequirement">Ignored</rule-property>
        <rule-property name="enumCommentRequirement">Ignored</rule-property>
        <expected-problems>1</expected-problems>
        <code-ref id="without-any-comments"/>
    </test-code>

    <test-code>
        <description>Too many comments - all comments are unwanted.</description>
        <rule-property name="classCommentRequirement">Unwanted</rule-property>
        <rule-property name="fieldCommentRequirement">Unwanted</rule-property>
        <rule-property name="publicMethodCommentRequirement">Unwanted</rule-property>
        <rule-property name="protectedMethodCommentRequirement">Unwanted</rule-property>
        <rule-property name="enumCommentRequirement">Unwanted</rule-property>
        <expected-problems>6</expected-problems>
        <code-ref id="with-all-comments"/>
    </test-code>

    <test-code>
        <description>#1115 commentRequiredRule in pmd 5.1 is not working properly</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
/**
 * Test class
 */
public class Test {
    public void method1() {
        /**
         * comment here
         */
    }

    public void method2() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1115 commentRequiredRule in pmd 5.1 is not working properly - without new lines</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
/** Test class */ public class Test { public void method1() { /** comment here */ } public void method2() { } }
        ]]></code>
    </test-code>

    <test-code>
        <description>#1289 CommentRequired not ignored if javadoc {@inheritDoc} anon inner classes</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {
    /**
     * Creates a new instance of comment required.
     */
    public CommentRequired() {
        Object o = new Object() {
            /**
             * {@inheritDoc}
             */
            public String toString() {
                return "Inner Class";
            }
        };
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1434 CommentRequired raises violation on serialVersionUID field</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.Serializable;
/** The class comment */
public class CommentRequired implements Serializable {
    private static final long serialVersionUID = 42L;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>comment required on serialVersionUID of wrong type</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    private static final int serialVersionUID = 42L;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>serialVersionUID comment required</description>
        <rule-property name="serialVersionUIDCommentRequired">Required</rule-property>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    private static final long serialVersionUID = 42L;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1684 whitelist serialPersistentFields</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.ObjectStreamField;
import java.util.List;
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    /** My list */
    List next;
    private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1684 comment required on serialPersistentFields of wrong type</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
import java.util.List;
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    /** My list */
    List next;
    private static final String[] serialPersistentFields = {"next"};
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1684 comment required on serialPersistentFields of wrong visibility</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import java.io.ObjectStreamField;
import java.util.List;
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    /** My list */
    List next;
    static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1684 comment required on serialPersistentFields not static</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import java.io.ObjectStreamField;
import java.util.List;
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    /** My list */
    List next;
    private final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1684 comment required on serialPersistentFields not final</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import java.io.ObjectStreamField;
import java.util.List;
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    /** My list */
    List next;
    private static ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1684 serialPersistentFields comment required</description>
        <rule-property name="serialPersistentFieldsCommentRequired">Required</rule-property>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import java.io.ObjectStreamField;
import java.util.List;
/** The class comment */
public class CommentRequired implements java.io.Serializable {
    /** My list */
    List next;
    private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1522 [java] CommentRequired: false positive</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package de.konsens.biene.ka.client;

/**
 * Kommentar zu PmdMissingHeaderCommentTest
 */
public class PmdMissingHeaderCommentTest {

    /**
     * Kommentar zu methode1()
     */
    public void methode1() {

        /**
        * Kommentar zu Local
        */
        class Local {

            /**
             * Kommentar zu methode1()
             */
            void methode1() {

            }
        }

        Local local = new Local();
        local.methode1();

        /**
         * Kommentar zu Local2
         */
        class Local2 {

            /**
             * Kommentar zu methode1()
             */
            void methode1() {
            }
        }

        Local2 local2 = new Local2();
        local2.methode1();
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Comment required ignores @override methods by default</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {
    @Override
    public void noComment() {
        Object o = new Object() {

            @Override
            public String toString() {
                return "Inner Class";
            }
        };
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Test @override methods reporting</description>
        <rule-property name="methodWithOverrideCommentRequirement">Required</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {
    @Override
    public void noComment() {
        Object o = new Object() {

            @Override
            public String toString() {
                return "Inner Class";
            }
        };
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Test @override methods reporting #2</description>
        <rule-property name="methodWithOverrideCommentRequirement">Required</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {
    /**
     * Comment provided
     */
    @Override
    public void noComment() {
        Object o = new Object() {

            /**
             * @inheritDoc
             */
            @Override
            public String toString() {
                return "Inner Class";
            }
        };
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Test @override methods unwanted</description>
        <rule-property name="methodWithOverrideCommentRequirement">Unwanted</rule-property>
        <expected-problems>2</expected-problems>
        <!-- Not the line of the annotation, the line of the identifier. -->
        <expected-linenumbers>9,16</expected-linenumbers>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {
    /**
     * Comment provided
     */
    @Override
    public void noComment() {
        Object o = new Object() {

            /**
             * @inheritDoc
             */
            @Override
            public String toString() {
                return "Inner Class";
            }
        };
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Test getter or setter comments are ignored by default</description>
        <rule-property name="fieldCommentRequirement">Ignored</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {

    private int foo;

    public int getFoo() {
        Object o = new Object() {

            String foox;

            public String getFoox() {
                return foox;
            }
        };
        return foo;
    }

    public void setFoo(int x) {
        foo = x;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Test accessors are reported when required</description>
        <rule-property name="fieldCommentRequirement">Ignored</rule-property>
        <rule-property name="accessorCommentRequirement">Required</rule-property>
        <expected-problems>3</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {

    private int foo;

    public int getFoo() {
        Object o = new Object() {

            String foox;

            public String getFoox() {
                return foox;
            }
        };
        return foo;
    }

    public void setFoo(int x) {
        foo = x;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Test accessors are reported when unwanted</description>
        <rule-property name="fieldCommentRequirement">Ignored</rule-property>
        <rule-property name="accessorCommentRequirement">Unwanted</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
/**
 * Comment required test class.
 */
public class CommentRequired {

    private int foo;

    /**
     * @return foo
     */
    public int getFoo() {
        Object o = new Object() {

            String foox;
            /**
             * @return foox
             */
            public String getFoox() {
                return foox;
            }
        };
        return foo;
    }

    public void setFoo(int x) {
        foo = x;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1683 [java] CommentRequired property names are inconsistent - use deprecated property</description>
        <rule-property name="headerCommentRequirement">Unwanted</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
/** Unwanted class comment */
public class CommentRequirement {}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1683 [java] CommentRequired property names are inconsistent - use new property</description>
        <rule-property name="classCommentRequirement">Unwanted</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
/** Unwanted class comment */
public class CommentRequirement {}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method overridden without @Override (#3123)</description>
        <rule-property name="methodWithOverrideCommentRequirement">Required</rule-property>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <code><![CDATA[
/** Comment */
public class CommentRequirement {
    //no @Override annotation
    public String toString() { // comment required
        return "";
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>Methods inside annotations (#3123)</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,4</expected-linenumbers>
        <code><![CDATA[
/** Comment */
@interface MyAnnotation1 {
    String name(); // comment required
    int version(); // comment required
}
]]></code>
    </test-code>
</test-data>
