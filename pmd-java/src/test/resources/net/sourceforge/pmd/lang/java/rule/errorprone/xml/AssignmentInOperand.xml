<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>bad</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        if ((x = getX()) == 3) {
            System.out.println("3!");
        }
    }
    private int getX() {
        return 3;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        if (false) {}
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in if conditional expression</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        if (false) {
            int x =2;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in while conditional expression</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        while ( (x = getX()) != 0 ) {}
    }
    private int getX() {return 2;}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i = 0; i < 10; i++) {
            int x = i;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in for conditional expression</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i = 0; (i = i + 1) < 10; i++) {
            int x = i;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>increment in if conditional expression</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 0;
        if (x++ > 0) {
            x = 2;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#5915 assignment in do-while conditional expression</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages><message>Avoid assignment to x in operand</message></expected-messages>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        do {
            System.out.println("loop");
        } while ((x = getX()) > 0);
    }
    private int getX() {return 1;}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in switch expression</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages><message>Avoid assignment to x in operand</message></expected-messages>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        switch ((x = getValue())) {
            case 1:
                System.out.println("one");
                break;
            default:
                break;
        }
    }
    private int getValue() {return 5;}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in while conditional expression, allowed</description>
        <rule-property name="allowWhile">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        while ( (x = getX()) != 0 ) {}
    }
    private int getX() {return 2;}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in if conditional expression, allowed</description>
        <rule-property name="allowIf">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        if ((x = getX()) == 3) {
            System.out.println("3!");
        }
    }
    private int getX() {
        return 3;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in for conditional expression, allowed</description>
        <rule-property name="allowFor">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i = 0; (i = i + 1) < 10; i++) {
            int x = i;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in do-while conditional expression, allowed</description>
        <rule-property name="allowDoWhile">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        do {
            System.out.println("loop");
        } while ((x = getX()) > 0);
    }
    private int getX() {return 1;}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>assignment in switch expression, allowed</description>
        <rule-property name="allowSwitch">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 2;
        switch ((x = getValue())) {
            case 1:
                System.out.println("one");
                break;
            default:
                break;
        }
    }
    private int getValue() {return 5;}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>increment in if conditional expression, allowed</description>
        <rule-property name="allowIncrementDecrement">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 0;
        if (x++ > 0) {
            x = 2;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Distinct error messages for the same line</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>Avoid assignment to x in operand</message>
            <message>Avoid assignment to y in operand</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int x = 0;
        int y = 0;
        if (x++ > (y = 5)) {
            x = 2;
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3434 Assignments in other contexts</description>
        <expected-problems>8</expected-problems>
        <expected-linenumbers>4,5,9,12,13,16,17,20</expected-linenumbers>
        <code><![CDATA[
            class AssignmentInOperand{
                void test(){
                    // case1
                    keys.contains(k = random.nextLong());
                    Character.isJavaIdentifierPart(text.charAt(--j));

                    // case2
                    addNextStaticMember = ((staticMember.getNextStaticMember() != null) ? true : false) ;
                    ((null == theClassMethods) ? (theClassMethods = theClass.getMethods()) : theClassMethods);

                    // case3
                    Character.isWhitespace(segment.array[offset++]);
                    subPropMatches[i++];

                    // case4
                    (is = ia.getNext(null)).isPresent();
                    (destFile = new File (dest, srcFO.getNameExt ())).exists();

                    // case5
                    new File(location, projectName = projectNamePrefix + "_" + num).exists();
                }
            }
        ]]></code>
    </test-code>

    <test-code>
        <description>Github issue #6075 - false positive in lambda expression</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            class PmdTest {
                private String field;
                public void pmdTest() {
                    Consumer<String> cons = s -> this.field = s;
                    cons.accept("pmd");
                }
            }
        ]]></code>
    </test-code>

    <test-code>
        <description>But assignments inside statements inside lambdas should still be flagged</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
            import java.util.function.IntConsumer;

            class PmdTest {
                private String field;
                public void pmdTest() {
                    IntConsumer cons = i -> f(i++);
                    cons.accept(42);
                }

                private static f(int i) {};
            }
        ]]></code>
    </test-code>
</test-data>
