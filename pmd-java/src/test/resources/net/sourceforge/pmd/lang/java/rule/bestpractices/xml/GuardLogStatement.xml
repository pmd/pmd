<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>OK, guard is here - log4j</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

public class Foo {
    private static final Logger logger = LogManager.getLogger(Foo.class);

    private void foo() {
        if ( logger.isDebugEnabled() )
            logger.debug("Debug statement:" + this);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>ok, no error expected - apache commons logging</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

public class Test {
    private static final Log __log = LogFactory.getLog(Test.class);
    public void test() {
        // good:
        if (__log.isDebugEnabled()) {
        __log.debug("bla" + this, e);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Guarded call - OK - java util</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.logging.Logger;

public class Foo {

    private void foo(Logger logger) {
        if ( logger.isLoggable(Level.FINE) ) {
            logger.fine("debug message: " + this);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>KO, missing guard 1 - log4j</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

public class Foo {
    private static final Logger logger = LogManager.getLogger(Foo.class);

    private void foo() {
        logger.debug("Debug statement: " + this);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>KO, missing guard 2 - log4j</description>
        <rule-property name="logLevels">debug,trace</rule-property>
        <rule-property name="guardsMethods">isDebugEnabled,isTraceEnabled</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

public class Foo {
    private static final Logger logger = LogManager.getLogger(Foo.class);

    private void foo() {
        logger.debug("Debug statement: " + this);
    }

    private void bar() {
        logger.info("No guard, but'is OK with properties configuration: " + this);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Complex logging without guard - apache commons logging</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

public class Test {
    private static final Log __log = LogFactory.getLog(Test.class);
    public void test() {

        // bad:
        __log.debug("log something" + this + " and " + "concat strings");

        // bad:
        __log.debug("log something" + this + " and " + "concat strings", e);

        // good:
        if (__log.isDebugEnabled()) {
        __log.debug("bla" + this, e);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Complex logging with misplaced guard - apache commons logging</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import org.apache.commons.logging.LogFactory;
import org.apache.commons.loggong.Log;

public class Test {
    private static final Log __log = LogFactory.getLog(Test.class);
    public void test() {
        if (true) {
            // bad:
            __log.debug("log something" + this + " and " + "concat strings");
            // this is useless:
            __log.isDebugEnabled();
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Unguarded call - KO - java util</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.logging.Logger;

public class Foo {

    private void foo(Logger logger) {
        logger.fine("debug message: " + this);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>ok #1189 GuardLogStatementRule and GuardDebugLoggingRule broken for log4j2</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;

public class Test {
    public void test(String mymarker) {
        final Logger logger = LogManager.getLogger(Test.class);
        final Marker m = MarkerManager.getMarker(mymarker);
        if (logger.isDebugEnabled(m)) {
          logger.debug(m, message + "");
        }
        if (logger.isTraceEnabled(m)) {
          logger.trace(m, message + "");
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>violation - wrong guard #1189 GuardLogStatementRule and GuardDebugLoggingRule broken for log4j2</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>11,14</expected-linenumbers>
        <code><![CDATA[
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;

public class Test {
    public void test(String mymarker) {
        final Logger logger = LogManager.getLogger(Test.class);
        final Marker m = MarkerManager.getMarker(mymarker);
        if (logger.isTraceEnabled(m)) { // should have been isDebugEnabled
          logger.debug(m, message + "");
        }
        if (logger.isDebugEnabled(m)) { // should have been isTraceEnabled
          logger.trace(m, message + "");
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>violation - no if #1189 GuardLogStatementRule and GuardDebugLoggingRule broken for log4j2</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>11</expected-linenumbers>
        <code><![CDATA[
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;

public class Test {
    public void test(String mymarker) {
        final Logger logger = LogManager.getLogger(Test.class);
        final Marker m = MarkerManager.getMarker(mymarker);
        logger.isDebugEnabled(m); // must be within an if
        logger.debug(m, message + "");
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1224 GuardDebugLogging broken in 5.1.1 - missing additive statement check in log statement - apache commons logging</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

public class Test {
    private static final Log __log = LogFactory.getLog(Test.class);
    public void test() {
        // okay:
        __log.debug("log something");

        // okay:
        __log.debug("log something with exception", e);

        // good:
        if (__log.isDebugEnabled()) {
        __log.debug("bla: " + this, e);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1341 pmd:GuardDebugLogging violates LOGGER.debug with format "{}" - slf4j</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GuardDebugFalsePositive {
    private static final Logger LOGGER = LoggerFactory.getLogger("GuardDebugFalsePositive");
    public void test() {
        String tempSelector = "a";
        LOGGER.debug("MessageSelector={}" , tempSelector);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1203 GuardLogStatementJavaUtil issues warning for severe level not being specified as property</description>
        <rule-property name="logLevels">finest,finer,fine,info</rule-property>
        <rule-property name="guardsMethods">isLoggable</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.logging.Logger;
import java.util.logging.Level;

public class Foo {
    Logger LOGGER;

    public void foo() {
        LOGGER.severe("This is a severe message" + this + " and concat");
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1227 GuardLogStatementJavaUtil doesn't catch log(Level.FINE, "msg" + " msg") calls</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>8</expected-linenumbers>
        <code><![CDATA[
import java.util.logging.Logger;
import java.util.logging.Level;

public class Foo {
    Logger LOGGER;

    public void foo() {
        LOGGER.log(Level.FINE, "This is a severe message" + this + " and concat"); // violation
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.log(Level.FINE, "This is a severe message" + this + " and concat"); // no violation
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1347 False positive for GuardLogStatementJavaUtil with slf4j</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.slf4j.Logger;

public class GuardLogTest {
    Logger LOG;
    public void foo() {
        if (LOG.isInfoEnabled()) {
            LOG.info("update: After spool map size: " + map.size());
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1398 False positive for GuardLogStatementJavaUtil with Log4j</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.log4j.Logger;

public class GuardLogTest {
    Logger LOG;
    public void foo() {
        if (LOG.isInfoEnabled()) {
            LOG.info("update: After spool map size: " + map.size());
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#783 [java] GuardLogStatement regression</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.log4j.Logger;

public class GuardLogTest {
    Logger LOG;
    public void foo() {
        if (!(exception instanceof IllegalArgumentException) && LOGGER.isErrorEnabled()) {
            LOGGER.error("Some error " + someObject, exception);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Wrong guard method for java util logging</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.logging.Logger;
import java.util.logging.Level;

public class Foo {
    Logger LOGGER;

    public void foo() {
        if (LOGGER.isLoggable(Level.INFO)) { // should have been level FINE
            LOGGER.log(Level.FINE, "This is a severe message" + this + " and concat");
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#370 rule not considering lambdas</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Logger {
    private static final Logger LOGGER = new Logger();

    public void bar() {
        String msg;
        msg = "test";
        LOGGER.info(() -> "Bla " + msg + " bla"); // The lambda is free to do whatever it likes
    }

    @Override
    public void info(Supplier<String> message) {
        if (logger.isInfoEnabled()) {
            logger.info(message.get());
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#869 [java] GuardLogStatement false positive with Math.log</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class GuardLogStatement {
    public void foo() {
        double confidence = 0.5;
        int depth = (int) Math.ceil(-Math.log(1 - confidence) / Math.log(2));
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#869 [java] GuardLogStatement false positive with something.error on return</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class GuardLogStatement {
    public String foo() {
        return ThisIsNotALogger.error("message " + this);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#3155 False negatives with unguarded method calls</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>5,6,7</expected-linenumbers>
        <code><![CDATA[
public class Logger {
    private static final Logger LOGGER = new Logger();

    public void bar() {
        LOGGER.info("Message with param: {}", expensiveOperation()); // bad, expensiveOperation is executed regardless
        LOGGER.info("Message with param: %s", this.expensiveOperation()); // bad, expensiveOperation is executed regardless
        LOGGER.info(expensiveOperation()); // bad, expensiveOperation is executed regardless

        if (LOGGER.isInfoEnabled()) {
            LOGGER.info("Message with param: {}", expensiveOperation());
        }
        if (LOGGER.isInfoEnabled()) {
            LOGGER.info("Message with param: %s", expensiveOperation());
        }
        if (LOGGER.isInfoEnabled()) {
            LOGGER.info(expensiveOperation());
        }

        LOGGER.info("Message with param: {}", () -> expensiveOperation());
        LOGGER.info("Message with param: %s", () -> expensiveOperation());
        LOGGER.info(()-> expensiveOperation());
    }

    private String expensiveOperation() {
        return "...";
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>[java] GuardLogStatement: False positive with compile-time constant arguments #957</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Logger {
    private static final Logger LOGGER = new Logger();
    private static final String CONSTANT = "a constant";

    public void case1() {
        LOGGER.debug("log something" + " and " + "concat strings"); // the same as "log something and concat strings"
    }

    public void case2() {
        final String constantPrefix = "log something";
        final String constantSuffix = "concat strings";
        LOGGER.debug(constantPrefix + " and " + constantSuffix ); // the same as "log something and concat strings"
    }

    public void case3() {
        LOGGER.debug("Prefix " + CONSTANT);
    }

    public void case4() {
        LOGGER.debug("Some long string that has been " + 
            "separated into two constants. Contains value: {}", param);
    }

    private void log(int line, String key) {
        System.out.println(line + ":" + key);
    }

    public void case5(int line, String key) {
        log(line, key);
        LOGGER.debug(key);
    }

    private interface TestLambda {
        void apply(String arg1, String arg2);
    }
    private void runTestLambda(TestLambda test) {
        test.apply("one", "two");
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>false negative inside lambdas</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>19,21</expected-linenumbers>
        <code><![CDATA[
public class Logger {
    private static final Logger LOGGER = new Logger();

    private interface TestLambda {
        void apply(String arg1, String arg2);
    }
    private void runTestLambda(TestLambda test) {
        test.apply("one", "two");
    }

    public void case1_no_violation() {
        runTestLambda((String a, String b) -> {
            LOGGER.debug(a);
        });
    }

    public void case2_violation() {
        runTestLambda((String a, String b) -> {
            LOGGER.debug(a + b);
        });
        runTestLambda((s1, s2) -> {LOGGER.debug(s1 + s2);});
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>NullPointerException applying rule GuardLogStatement (#3340)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Logger {
    private static final Logger LOGGER = new Logger();

    public void bar() {
        LOGGER.debug();
    }
}
        ]]></code>
    </test-code>
</test-data>
