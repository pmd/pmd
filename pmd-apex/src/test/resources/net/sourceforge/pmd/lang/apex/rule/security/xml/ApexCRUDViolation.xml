<?xml version="1.0" encoding="UTF-8"?>

<test-data>
	<test-code>
		<description>VF built-in CRUD checks via getter</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 	
	public Contact getFoo() {
		String tempID = 'someID';
	 	Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
	 	return c;
	} 
	
	public Contact getBaz() {
		String tempID = 'someID';
	 	return  [SELECT Name FROM Contact WHERE Id=:tempID];
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>Bypassing VF built-in CRUD checks via getter
		</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 	
	public String getUserName() {
		String tempID = 'someID';
	 	Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
	 	return c.Name;
	} 
} 
]]></code>
	</test-code>



	<test-code>
		<description>No VF provided CRUD checks via getter</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 	
	public Contact justGiveMeFoo() {
		String tempID = 'someID';
	 	return [SELECT Name FROM Contact WHERE Id=:tempID];
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>Proper CRUD checks</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 	
	public Contact justGiveMeFoo() {
		String tempID = 'someID';
		if (Contact.sObjectType.getDescribe().isAccessible()) {
	 		return [SELECT Name FROM Contact WHERE Id=:tempID];
	 	}
	 	return null;
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>No CRUD,FLS needed via sObject property</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public Contact contactProperty { get; set; }
	
	public void foo(String tempID) {
	 		contactProperty = [SELECT Name FROM Contact WHERE Id=:tempID];
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>Proper FLS check </description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		List<String> fieldsToView = new List<String> { 'name' };
		if (ESAPI.accessController().isAuthorizedToUpdate(Contact.sObject, fieldsToView)) { 
			Contact c = [SELECT Name FROM Contact WHERE Id=:tempID]; 
			c.Name = newName;
			update c; 
		}
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>Proper FLS fall-through check </description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		if (Schema.sObjectType.Contact.fields.Name.isUpdateable()) {
			Contact c = [SELECT Name FROM Contact WHERE Id=:tempID]; 
			c.Name = newName;
			update c; 
		}
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>Improper accessibility CRUD </description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public Contact foo(String tempID) { 
		Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
		return c;
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>Proper accessibility CRUD,FLS </description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public Contact foo(String tempID) { 
		if (Contact.sObjectType.getDescribe().isAccessible()) {
			Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
			return c;
		}
		return null;
	} 
} ]]></code>
	</test-code>


	<test-code>
		<description>Proper CRUD,FLS via property</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public Contact MyWriteOnlyProp { get; set; }
	
	public void foo(String newName, String tempID) { 
		if (Contact.sObjectType.getDescribe().isCreateable()) {
			MyWriteOnlyProp = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
			insert MyWriteOnlyProp;
		}
	} 
	
} 
]]></code>
	</test-code>

	<test-code>
		<description>No CRUD,FLS via sObject property, write is not protected
		</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public Contact MyWriteOnlyProp { get; set; }
	
	public void foo(String newName, String tempID) { 
			MyWriteOnlyProp = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
			insert MyWriteOnlyProp;
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>No CRUD,FLS for List insertion </description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public List<Contact> MyWriteOnlyProp { get; set; }
	
	public void foo(String newName, String tempID) { 
			MyWriteOnlyProp.add(new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414'));
			insert MyWriteOnlyProp;
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>Proper CRUD,FLS for List insertion </description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public List<Contact> MyWriteOnlyProp { get; set; }
	
	public void foo(String newName, String tempID) { 
			MyWriteOnlyProp.add(new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414'));
			if(Contact.sObjectType.getDescribe().isCreateable()) {
				insert MyWriteOnlyProp;
			}
	} 
} 
]]></code>
	</test-code>

	<test-code>
		<description>No CRUD,FLS via String property</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public String nameProperty { get; set; }
	
	public void foo(String tempID) {
	 		Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
			nameProperty = c.Name;
	} 
} 
]]></code>
	</test-code>


	<test-code>
		<description>Proper CRUD,FLS via upsert</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		if (Contact.sObjectType.getDescribe().isCreateable() && Contact.sObjectType.getDescribe().isUpdateable()) {
			Contact myCon = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
			upsert myCon;
		}
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>Partial CRUD,FLS via upsert</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		if (Contact.sObjectType.getDescribe().isUpdateable()) {
			Contact myCon = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
			upsert myCon;
		}
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description> No CRUD,FLS via upsert</description>
		<expected-problems>2</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		Contact myCon = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
		upsert myCon;
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>Improper CRUD,FLS via ESAPI 1</description>
		<expected-problems>2</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		// missing accessibility check
		Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
		List<String> fieldsToView = new List<String> { 'name' };
		// wrong ESAPI check
		if (ESAPI.accessController().isAuthorizedToView(Contact.sObject, fieldsToView)) { 
			c.Name = newName; 
			update c; 
		}
	} 
} ]]></code>
	</test-code>



	<test-code>
		<description>Proper CRUD,FLS via ESAPI</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) {
		List<String> fieldsToView = new List<String> { 'name' };
		if (ESAPI.accessController().isAuthorizedToView(Contact.sObject, fieldsToView)) { 
			Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
			if (ESAPI.accessController().isAuthorizedToUpdate(Contact.sObject, fieldsToView)) { 
				c.Name = newName; 
				update c; 
			}
		}
	} 
} ]]></code>
	</test-code>


	<test-code>
		<description>Improper CRUD,FLS via ESAPI 2</description>
		<expected-problems>2</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		// missing accessibility check
		Contact c = [SELECT Name FROM Contact WHERE Id=:tempID];
		List<String> fieldsToView = new List<String> { 'name' };
		// wrong object check
		if (ESAPI.accessController().isAuthorizedToView(Lead.sObject, fieldsToView)) { 
			c.Name = newName; 
			update c; 
		}
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>CRUD,FLS check for update</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		List<String> fieldsToView = new List<String> { 'name' };
		if (ESAPI.accessController().isAuthorizedToView(Contact.sObject, fieldsToView)) { 
			Contact c = [SELECT Name FROM Contact WHERE Id=:tempID]; 
			if(Schema.sObjectType.Contact.fields.Name.isUpdateable()) {
				c.Name = newName; 
				update c; 
			}
		}
	} 
} ]]></code>
	</test-code>


	<test-code>
		<description>No CRUD,FLS check for update</description>
		<expected-problems>2</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public void foo(String newName, String tempID) { 
		Contact c = [SELECT Name FROM Contact WHERE Id=:tempID]; 
		c.Name = newName; 
		update c; 
	} 
} ]]></code>
	</test-code>


	<test-code>
		<description>Proper CRUD,FLS check for update</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[ 
public class Foo { 
	public Contact foo(String newName, String tempID) { 
		if (Contact.sObjectType.getDescribe().isAccessible()) {
			Contact c = [SELECT Name FROM Contact WHERE Id=:tempID]; 
			if (!Schema.sObjectType.Contact.fields.Name.isUpdateable()){ 
				return null; 
			} 
			c.Name = newName; 
		}
		update c; 
		return c; 
	} 
} ]]></code>
	</test-code>

	<test-code>
		<description>No CRUD check for insert</description>
		<expected-problems>1</expected-problems>
		<code><![CDATA[
public class Foo {
	public void foo() {
		Contact myCon = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
		insert myCon;
	}
}
		]]></code>
	</test-code>

	<test-code>
		<description>Proper CRUD check for insert</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[
public class Foo {
	public void foo() {
		if (Contact.sObjectType.getDescribe().isCreateable()) {
			Contact myCon = new Contact(FirstName = 'First', LastName = 'Last', Phone = '414-414-4414');
			insert myCon;
		}	
	}
}
		]]></code>
	</test-code>

	<test-code>
		<description>No CRUD check for delete</description>
		<expected-problems>2</expected-problems>
		<code><![CDATA[
public class Foo {
	public void bar(String contactId) {
			Contact toDelete = [SELECT Id FROM Contact WHERE Id=: contactId];
			delete toDelete;			
	}
}
		]]></code>
	</test-code>

	<test-code>
		<description>Proper CRUD check for delete</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[
public class Foo {
	public void bar(String contactId) {
		if (Contact.sObjectType.getDescribe().isAccessible()) {
			Contact toDelete = [SELECT Id FROM Contact WHERE Id=: contactId];		
			if (Contact.sObjectType.getDescribe().isDeletable()) {
				delete toDelete;
			}	
		}
	}
}
		]]></code>
	</test-code>
	<test-code>
		<description>Proper CRUD check for a list of sObject</description>
		<expected-problems>0</expected-problems>
		<code><![CDATA[
public class Foo {
	public void bar(String contactId) {
		if (Contact.sObjectType.getDescribe().isAccessible()) {
			List<Contact> contacts = [SELECT Id FROM Contact];		
			if (Contact.sObjectType.getDescribe().isDeletable()) {
				delete toDelete;
			}	
		}
	}
}
		]]></code>
	</test-code>
</test-data>
