<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <code-fragment id="full-example"><![CDATA[
public class Foo extends Bar {
    int y, z, t;
    String q;

    {
        bar();
        int x;
        switch on
        x {
        when 1 { foo(); break; }
        when 2 { }
        when 3 { bar();
            break; }
        when else { break; }
        }
    }

    public Foo() {
        this(2);
    }

    public Foo(int z) {

        Random r = new Random();
        for (int j = -12; i < z; i++) {
            for (int k = -20; k < 20; k += j) {
                if (r.nextInt() == 42) {
                    System
                            .out
                            .println('Bye');
                    break;
                } else if (k > 12) {
                    continue;
                }
            }
        }

        super.f(z);
    }

    public void foo() {
        int x = 0;
        x++;

        do {
            if (x == 0) {
                x++;
            } else if (x == 1) {
                x = 0;
            } else {
                System.out.println('Bonjour');
                throw new ScaryException('Surprise!');
            }
        } while (x != 2);
    }

    public static void main(String[] args) {
        String k, l, m;
        int x;

        bar();

        do {
            x++;
        } while (x < 2);

        while (x < 4) {
            x++;
        }

        for (int i = 1; x < 6; ) {
            x += i;
        }

        {
            x++;
        }

        int p =
                2 + 4 + 5;

        try {
            x++;
        } catch (ArrayIndexOutOfBoundsException e) {
            e.printStackTrace();
        } catch (ThemAll pokemon) {
            pokemon.train();
        } finally {
            // Do nothing
        }

        bar();
        x = (int) bar();
        /*
         * This is
         * a comment
         */
        x.foobar();
    }
}
    ]]></code-fragment>

    <test-code>
        <description>Full example</description>
        <expected-problems>5</expected-problems>
        <expected-messages>
            <message>'Foo' has value 59.</message>
            <message>'Foo#Foo()' has value 2.</message>
            <message>'Foo#Foo(int)' has value 10.</message>
            <message>'Foo#foo()' has value 11.</message>
            <message>'Foo#main(String[])' has value 21.</message>
        </expected-messages>
        <code-ref id="full-example"/>
    </test-code>

    <test-code>
        <description>Empty ctor and method</description>
        <expected-problems>3</expected-problems>
        <expected-messages>
            <message>'Foo' has value 3.</message>
            <message>'Foo#Foo()' has value 1.</message>
            <message>'Foo#foo()' has value 1.</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    Foo() {
        // Comment not counted
    }
    void foo() {
        // Comment not counted
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field Declarations</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'Foo' has value 3.</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    private int field1;
    private int field2,
                field3;
}
]]></code>
    </test-code>

    <test-code>
        <description>Switch statement</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Foo' has value 12.</message>
            <message>'Foo#foo()' has value 11.</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void foo() {
        int x;
        switch on x {
            when 1 {}
            when 2, 3 {}
            when 5 { foo(); break; }
            when Foo f {}
            when else { break; }
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Multiple local variable declarations</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Foo' has value 3.</message>
            <message>'Foo#foo()' has value 2.</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void foo() {
        int x, y = 2, z;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Try is not counted, only catch clauses and finally</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Foo' has value 5.</message>
            <message>'Foo#foo()' has value 4.</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void foo() {
        try {
        } catch (MyException e) {
        } catch (Exception e) {
        } finally {
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Blocks are not counted</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Boo' has value 4.</message>
            <message>'Boo#foo()' has value 3.</message>
        </expected-messages>
        <code><![CDATA[
public class Boo {
    void foo() {
        foo();
        {
        }
        {
            bar();
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>For initialisations are not counted</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Hoo' has value 4.</message>
            <message>'Hoo#foo()' has value 3.</message>
        </expected-messages>
        <code><![CDATA[
public class Hoo {
    void foo() {
        for (int x = 0; x < 2; x++) {

        }

        for (;;) {

        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Nested classes are counted</description>
        <expected-problems>4</expected-problems>
        <expected-messages>
            <message>'Boo' has value 8.</message>
            <message>'Boo#foo()' has value 2.</message>
            <message>'Boo.Barnabee' has value 5.</message>
            <message>'Boo.Barnabee#getX()' has value 2.</message>
        </expected-messages>
        <code><![CDATA[
public class Boo {
    void foo() {
        bar();
    }

    class Barnabee {
        int x;
        int y;

        int getX() {
            return x;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Enum constants are not counted</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'Shoo' has value 1.</message>
        </expected-messages>
        <code><![CDATA[
public enum Shoo {
    BAR, NA, BEE
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Abstract methods are counted</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Koo' has value 2.</message>
            <message>'Koo#bar()' has value 1.</message>
        </expected-messages>
        <code><![CDATA[
public abstract class Koo {
    abstract void bar();
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While/do-while loops</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Foo' has value 4.</message>
            <message>'Foo#foo(int)' has value 3.</message>
        </expected-messages>
        <code><![CDATA[
class Foo {
    void foo(int x) {
        while (x < 10) { }

        do {
        } while (x < 10);
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>Javadoc Example (net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.NCSS)</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>'Foo' has value 12.</message>
            <message>'Foo#bigMethod()' has value 11.</message>
        </expected-messages>
        <code><![CDATA[
class Foo {                         // +1, total Ncss = 12

  public void bigMethod()           // +1
  {
    int x = 0, y = 2;               // +1
    boolean a = false, b = true;    // +1

    if (a || b) {                   // +1
      try {                         // +1
        do {                        // +1
          x += 2;                   // +1
        } while (x < 12);

        System.exit(0);             // +1
      } catch (IOException ioe) {   // +1
        throw new PatheticFailException(ioe); // +1
      }
    } else {
      System.out.println('false');  // +1
    }
  }
}
]]></code>
    </test-code>
</test-data>
