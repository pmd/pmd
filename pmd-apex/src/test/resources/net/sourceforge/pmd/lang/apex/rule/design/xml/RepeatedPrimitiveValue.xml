<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">


    <test-code>
        <description>Repeated Strings</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    String a = 'hello';
    String b = 'hello';
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated Integers</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer age1 = 5;
    Integer age2 = 5;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated Longs</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Long age1 = 5;
    Long age2 = 5;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated Decimals</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Decimal age1 = 5.1;
    Decimal age2 = 5.1;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated Doubles</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Decimal age1 = 5.1;
    Decimal age2 = 5.1;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated value across Long and Integer</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer age1 = 5;
    Long age2 = 5;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated value across Double and Decimal</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Double age1 = 5.1;
    Decimal age2 = 5.1;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Values in if statements are checked</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod(String bar) {
    String foo = 'foo';
    if (bar == 'foo') {
    }
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Values in for loops are checked</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer y = 5;
    for (Integer i = 0; i < 5; i++) {
    }
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Values in while statements are checked</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod(Integer x) {
    Integer y = 5;
    while (x < 5) {
    }
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Values defined in different scopes count as repetition</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  private String bar = 'foo';

  public void myMethod(String bar) {
    String foo = 'foo';
  }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Values in inner classes count as repetition</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod(String bar) {
    String foo = 'foo';
  }

  private class Demo {
    public void myMethod(String bar) {
      String foo = 'foo';
    }
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Same value but different semantically identical representation is not a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer age1 = 5;
    Decimal age2 = 5.0;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>String and number are fundamentally different</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    String age1 = '5';
    Integer age2 = 5;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Repeated empty String is not a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    String age1 = '';
    String age2 = '';
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Commonly used numbers are not a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer age1 = 0;
    Integer age2 = 0;

    Integer age3 = -1;
    Integer age4 = -1;

    Integer age5 = 1;
    Integer age6 = 1;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Number used in Integer and in Date construction is not violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer age1 = 2;
    Date theDate = Date.newInstance(2024, 2, 15);
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Number used in Integer and in DateTime construction is not violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  public void myMethod() {
    Integer age1 = 2;
    DateTime myDateTime = DateTime.newInstance(2024, 2, 15, 10, 30, 0);
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Number used across multiple constants is not a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  private static final Integer NUMBER_OF_DAYS = 10;
  private static final Integer NUMBER_OF_HOURS = 10;
  public void myMethod() {
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Number used in constant and in elsewhere is a violation</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Example {
  private static final Integer NUMBER_OF_DAYS = 10;
  public void myMethod() {
    Integer numberOfMinutes = 10;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Number used twice in the same constant is not a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  private static final Long MILLISECONDS = 555550000;
  private static final Decimal HOURS = MILLISECONDS / (1000 * 60 * 60);
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Composition of constants which use the same number is not a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  private static final Integer TEST = 2;
  private static final Decimal HOURS = Math.pow(TEST, 2);
}
        ]]></code>
    </test-code>

    <test-code>
    <description>Booleans should not cause a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  private static void doSomething() {
    Boolean apexIsCool = true;
    Boolean apexCanBeFun = true;
    Boolean apexCanBeChallenging = true;
  }
}
        ]]></code>
    </test-code>

    <test-code>
    <description>Blobs should not cause a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  private static final String BLOB_VALUE = 'Hello, World!';
  private static void doSomething() {
    Blob blob1 = Blob.valueOf(BLOB_VALUE);
    Blob blob2 = Blob.valueOf(BLOB_VALUE);
  }
}
        ]]></code>
    </test-code>

    <test-code>
    <description>Objects should not cause a violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Example {
  private static final String VALUE = 'Hello, World!';
  private static void doSomething() {
    Object object1 = VALUE;
    Object object2 = VALUE;
  }
}
        ]]></code>
    </test-code>
</test-data>
