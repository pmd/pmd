+- ApexFile[@DefiningType = "PmdTest", @RealLoc = true]
   +- UserClass[@DefiningType = "PmdTest", @Image = "PmdTest", @InterfaceNames = (), @Nested = false, @RealLoc = true, @SimpleName = "PmdTest", @SuperClassName = ""]
      +- ModifierNode[@Abstract = false, @DefiningType = "PmdTest", @DeprecatedTestMethod = false, @Final = false, @Global = false, @InheritedSharing = false, @Modifiers = 1, @Override = false, @Private = false, @Protected = false, @Public = true, @RealLoc = true, @Static = false, @Test = false, @TestOrTestSetup = false, @Transient = false, @Virtual = false, @WebService = false, @WithSharing = false, @WithoutSharing = false]
      +- Method[@Arity = 0, @CanonicalName = "queryOpportunities", @Constructor = false, @DefiningType = "PmdTest", @Image = "queryOpportunities", @RealLoc = true, @ReturnType = "void", @StaticInitializer = false]
      |  +- ModifierNode[@Abstract = false, @DefiningType = "PmdTest", @DeprecatedTestMethod = false, @Final = false, @Global = false, @InheritedSharing = false, @Modifiers = 0, @Override = false, @Private = false, @Protected = false, @Public = false, @RealLoc = false, @Static = false, @Test = false, @TestOrTestSetup = false, @Transient = false, @Virtual = false, @WebService = false, @WithSharing = false, @WithoutSharing = false]
      |  +- BlockStatement[@CurlyBrace = true, @DefiningType = "PmdTest", @RealLoc = true]
      |     +- VariableDeclarationStatements[@DefiningType = "PmdTest", @RealLoc = true]
      |     |  +- ModifierNode[@Abstract = false, @DefiningType = "PmdTest", @DeprecatedTestMethod = false, @Final = false, @Global = false, @InheritedSharing = false, @Modifiers = 0, @Override = false, @Private = false, @Protected = false, @Public = false, @RealLoc = false, @Static = false, @Test = false, @TestOrTestSetup = false, @Transient = false, @Virtual = false, @WebService = false, @WithSharing = false, @WithoutSharing = false]
      |     |  +- VariableDeclaration[@DefiningType = "PmdTest", @Image = "myList", @RealLoc = true, @Type = "List<Opportunity>"]
      |     |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "myList", @RealLoc = true]
      |     |        +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
      |     +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
      |     |  +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
      |     |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "myList", @RealLoc = true]
      |     |     |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
      |     |     +- SoqlExpression[@CanonicalQuery = "SELECT CONVERTCURRENCY(Amount)\n            FROM Opportunity", @DefiningType = "PmdTest", @Query = "SELECT convertcurrency(Amount)\n            FROM Opportunity", @RealLoc = true]
      |     +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
      |     |  +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
      |     |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "myList", @RealLoc = true]
      |     |     |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
      |     |     +- SoqlExpression[@CanonicalQuery = "SELECT Amount, FORMAT(amount) Amt, CONVERTCURRENCY(amount) convertedAmount,\n                FORMAT(CONVERTCURRENCY(amount)) convertedCurrency\n            FROM Opportunity WHERE id = \'006R00000024gDtIAI\'", @DefiningType = "PmdTest", @Query = "SELECT Amount, FORMAT(amount) Amt, convertCurrency(amount) convertedAmount,\n                FORMAT(convertCurrency(amount)) convertedCurrency\n            FROM Opportunity where id = \'006R00000024gDtIAI\'", @RealLoc = true]
      |     +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
      |        +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
      |           +- VariableExpression[@DefiningType = "PmdTest", @Image = "myList", @RealLoc = true]
      |           |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
      |           +- SoqlExpression[@CanonicalQuery = "SELECT FORMAT(MIN(closedate)) Amt FROM opportunity", @DefiningType = "PmdTest", @Query = "SELECT FORMAT(MIN(closedate)) Amt FROM opportunity", @RealLoc = true]
      +- Method[@Arity = 0, @CanonicalName = "soslQueries", @Constructor = false, @DefiningType = "PmdTest", @Image = "soslQueries", @RealLoc = true, @ReturnType = "void", @StaticInitializer = false]
         +- ModifierNode[@Abstract = false, @DefiningType = "PmdTest", @DeprecatedTestMethod = false, @Final = false, @Global = false, @InheritedSharing = false, @Modifiers = 0, @Override = false, @Private = false, @Protected = false, @Public = false, @RealLoc = false, @Static = false, @Test = false, @TestOrTestSetup = false, @Transient = false, @Virtual = false, @WebService = false, @WithSharing = false, @WithoutSharing = false]
         +- BlockStatement[@CurlyBrace = true, @DefiningType = "PmdTest", @RealLoc = true]
            +- VariableDeclarationStatements[@DefiningType = "PmdTest", @RealLoc = true]
            |  +- ModifierNode[@Abstract = false, @DefiningType = "PmdTest", @DeprecatedTestMethod = false, @Final = false, @Global = false, @InheritedSharing = false, @Modifiers = 0, @Override = false, @Private = false, @Protected = false, @Public = false, @RealLoc = false, @Static = false, @Test = false, @TestOrTestSetup = false, @Transient = false, @Virtual = false, @WebService = false, @WithSharing = false, @WithoutSharing = false]
            |  +- VariableDeclaration[@DefiningType = "PmdTest", @Image = "searchResults", @RealLoc = true, @Type = "List<List<SObject>>"]
            |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "searchResults", @RealLoc = true]
            |        +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
            +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
            |  +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
            |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "searchResults", @RealLoc = true]
            |     |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
            |     +- SoslExpression[@CanonicalQuery = "FIND :tmpVar1\n                IN ALL FIELDS\n                RETURNING\n                        Account(Id, TOLABEL(Name) AliasName)\n                LIMIT 10", @DefiningType = "PmdTest", @Query = "\n                FIND :searchTerm\n                IN ALL FIELDS\n                RETURNING\n                        Account(Id, toLabel(Name) AliasName)\n                LIMIT 10\n        ", @RealLoc = true]
            |        +- BindExpressions[@DefiningType = "PmdTest", @RealLoc = true]
            |           +- VariableExpression[@DefiningType = "PmdTest", @Image = "searchTerm", @RealLoc = true]
            |              +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
            +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
            |  +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
            |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "searchResults", @RealLoc = true]
            |     |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
            |     +- SoslExpression[@CanonicalQuery = "FIND \'test\' RETURNING Opportunity(Name, CONVERTCURRENCY(Amount), CONVERTCURRENCY(Amount) AliasCurrency)", @DefiningType = "PmdTest", @Query = " FIND \'test\' RETURNING Opportunity(Name, convertCurrency(Amount), convertCurrency(Amount) AliasCurrency) ", @RealLoc = true]
            +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
            |  +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
            |     +- VariableExpression[@DefiningType = "PmdTest", @Image = "searchResults", @RealLoc = true]
            |     |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
            |     +- SoslExpression[@CanonicalQuery = "FIND \'Acme\' RETURNING Account(AnnualRevenue, FORMAT(CONVERTCURRENCY(AnnualRevenue)) convertedCurrency)", @DefiningType = "PmdTest", @Query = " FIND \'Acme\' RETURNING Account(AnnualRevenue, FORMAT(convertCurrency(AnnualRevenue)) convertedCurrency) ", @RealLoc = true]
            +- ExpressionStatement[@DefiningType = "PmdTest", @RealLoc = true]
               +- AssignmentExpression[@DefiningType = "PmdTest", @Op = AssignmentOperator.EQUALS, @RealLoc = true]
                  +- VariableExpression[@DefiningType = "PmdTest", @Image = "searchResults", @RealLoc = true]
                  |  +- EmptyReferenceExpression[@DefiningType = null, @RealLoc = false]
                  +- SoslExpression[@CanonicalQuery = "FIND \'Acme\' RETURNING Account(AnnualRevenue, FORMAT(MIN(CloseDate)))", @DefiningType = "PmdTest", @Query = " FIND \'Acme\' RETURNING Account(AnnualRevenue, FORMAT(MIN(CloseDate))) ", @RealLoc = true]
