{"version":3,"file":"shuffle.min.js","sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/layout.js","../src/array-min.js","../src/shuffle.js","../src/hyphenate.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width\n      && a.top < b.top + b.height && b.top < a.top + a.height);\n  }\n}\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","let value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  value = window.getComputedStyle(e, null).width === '10px';\n\n  element.removeChild(e);\n\n  return value;\n};\n","import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(\n  element, style,\n  styles = window.getComputedStyle(element, null),\n) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft)\n      + getNumber(styles.paddingRight)\n      + getNumber(styles.borderLeftWidth)\n      + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop)\n      + getNumber(styles.paddingBottom)\n      + getNumber(styles.borderTopWidth)\n      + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({\n  itemSize, positions, gridSize, total, threshold, buffer,\n}) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some(r => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some(itemRect => rects.some((r) => {\n        const intersects = Rect.intersects(itemRect, r);\n        if (intersects) {\n          intersectingRect = r;\n        }\n        return intersects;\n      }));\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex(items => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort((a, b) => (a.id - b.id))\n    .map(itemRect => new Point(itemRect.left, itemRect.top));\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport {\n  getItemPosition,\n  getColumnSpan,\n  getAvailablePositions,\n  getShortColumn,\n  getCenteredPositions,\n} from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (this.options.delimeter) {\n      this.options.delimiter = this.options.delimeter;\n    }\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle\n      ? this.options.throttle(resizeFunction, this.options.throttleTime)\n      : resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n    // Loop through each item and use provided function to determine\n    // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimiter\n      ? attr.split(this.options.delimiter)\n      : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(k => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = speed + 'ms';\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter(el => matches(el, this.options.itemSelector))\n      .map(el => new ShuffleItem(el));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter(item => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter(item => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n    // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n    // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n    // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n    // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns)\n        < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map(item => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    const styles = Object.assign({}, styleObject);\n\n    if (this.options.useTransforms) {\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      styles.left = item.point.x + 'px';\n      styles.top = item.point.y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n    // A call to layout happened, but none of the newly visible items will\n    // change position or the transition duration is zero, which will not trigger\n    // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map(obj => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n   */\n  update(isOnlyLayout = false) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = item => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map(element => this.getItemByElement(element))\n      .filter(item => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter(item => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find(item => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n","/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","proto","Element","vendor","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","el","selector","nodeType","nodes","parentNode","querySelectorAll","func","wait","args","rtn","timeoutID","last","delta","Date","setTimeout","noop","getNumber","value","parseFloat","Point","x","y","a","b","Rect","w","h","id","left","top","width","height","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","ShuffleItem","element","isVisible","isHidden","classList","remove","Classes","add","removeAttribute","setAttribute","addClasses","applyCss","Css","INITIAL","scale","Scale","point","classes","forEach","className","_this","_this2","obj","Object","keys","key","_this3","style","removeClasses","position","visibility","willChange","before","opacity","after","transitionDelay","document","body","documentElement","createElement","cssText","appendChild","window","getComputedStyle","removeChild","getNumberStyle","styles","testComputedSize","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","defaults","reverse","by","compare","randomize","sorter","arr","options","opts","assign","original","Array","from","revert","array","n","Math","floor","random","temp","sort","valA","valB","undefined","transitions","eventName","count","cancelTransitionEnd","removeEventListener","onTransitionEnd","evt","currentTarget","target","addEventListener","arrayMax","max","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","min","ceil","getAvailablePositions","positions","available","getShortColumn","buffer","minPosition","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","intersectingRect","lastItem","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersects","rowIndex","findIndex","items","includes","splice","concat","map","arrayUnique","Set","Shuffle","delimeter","delimiter","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_getElementOption","TypeError","_init","TinyEmitter","_getItems","sizer","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","jquery","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","show","hide","init","dispose","visibleItems","_getFilteredItems","positionProps","useTransforms","cssProps","k","replace","str","m1","toLowerCase","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","shuffle","itemPositions","_getNextPositions","equals","_this4","getStylesForTransition","_getStaggerAmount","isCentered","itemsData","itemSize","_this5","_getItemPosition","getTransformedPositions","gridSize","total","span","setY","shortColumnIndex","setHeight","getItemPosition","_getConcealedItems","_this6","update","styleObject","roundTransforms","transform","itemCallback","done","_this7","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","fns","context","pending","finished","results","maybeDone","err","result","parallel","_this8","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","sortOptions","_filter","_shrink","_updateItemCount","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","sortedItems","_mergeNewItems","allSortedItemsSet","isNewItem","applyHiddenState","_this9","isUpdateLayout","oldItems","_this10","getItemByElement","_disposeItems","REMOVED","find","_this11","includeMargins","duration","delay","ALL","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions"],"mappings":"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"}