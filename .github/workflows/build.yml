name: Build

on:
  workflow_call:

# if another commit is added to the same branch or PR (same github.ref),
# then cancel already running jobs and start a new build.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

env:
  LANG: 'en_US.UTF-8'

jobs:
  compile:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - name: Fast Build with Maven
        run: |
          ./mvnw --show-version --errors --batch-mode \
            -Dmaven.repo.local=.m2/repository \
            verify -PfastSkip -DskipTests -Dcyclonedx.skip=false \
            deploy:deploy -DaltDeploymentRepository="dogfood::file://$(pwd)/target/staging"
      - name: Cleanup local repository
        run: |
          # Cleanup local repository to not poison the shared cache with our SNAPSHOTS of the current build.
          # Some information is stored in maven-metadata-*.xml files which tells maven which
          # version exactly is available in the staging repo. But if we rerun the build using the
          # older cache, it points to the old staging versions, which are not available anymore.
          find .m2/repository/net/sourceforge/pmd -type d -name "*-SNAPSHOT" -and -not -path "*/pmd-designer/*" -print0 | xargs -0 rm -vrf
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: compile-artifact
          if-no-files-found: error
          path: |
            */target
            */*/target
            !pmd-dist/target/pmd-dist-*-bin.zip
            !pmd-dist/target/pmd-dist-*-src.zip
            !pmd-dist/target/pmd-*-cyclonedx.xml
            !pmd-dist/target/pmd-*-cyclonedx.json
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: staging-repository
          if-no-files-found: error
          path: target/staging
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: dist-artifact
          if-no-files-found: error
          path: |
            pmd-dist/target/pmd-dist-*-bin.zip
            pmd-dist/target/pmd-dist-*-src.zip
            pmd-dist/target/pmd-*-cyclonedx.xml
            pmd-dist/target/pmd-*-cyclonedx.json

  verify:
    needs: compile
    timeout-minutes: 30
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: compile-artifact
      - name: Full Build with Maven
        run: |
          ./mvnw --show-version --errors --batch-mode \
              -Dmaven.repo.local=.m2/repository \
              verify -DskipTests
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: javadocs-artifact
          if-no-files-found: error
          path: |
            */target/*-javadoc.jar
            */*/target/*-javadoc.jar

  verify-unittests:
    needs: compile
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      # don't fail fast - we want to know the results of all runs
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        # under linux we execute more extensive integration tests with various java versions
        if: ${{ runner.os == 'Linux' }}
        with:
          distribution: 'temurin'
          java-version: |
            8
            17
            21
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        # default java version for all os is 11
        with:
          distribution: 'temurin'
          java-version: '11'
      # only restore the cache, don't create a new cache
      # Note: this works under Windows only if pom.xml files use LF, so that hashFiles('**/pom.xml')
      # gives the same result (line endings...).
      # see .gitattributes for pom.xml - it should always be using lf.
      - uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        # we can only reuse compile-artifacts under linux due to file timestamp issues and
        # platform specific line endings in test resource files.
        if: ${{ runner.os == 'Linux' }}
        with:
          name: compile-artifact
      - name: Build with Maven and run unit tests
        run: |
          ./mvnw --show-version --errors --batch-mode \
              -Dmaven.repo.local=.m2/repository \
              verify \
              -PfastSkip -Dcyclonedx.skip=false \
              -Djava8.home="${JAVA_HOME_8_X64}" \
              -Djava17.home="${JAVA_HOME_17_X64}" \
              -Djava21.home="${JAVA_HOME_21_X64}"

  dogfood:
    needs: compile
    timeout-minutes: 30
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: compile-artifact
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: staging-repository
          path: target/staging
      - name: Run PMD on PMD
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            dogfood_name="pr-$(jq -r ".number" "${GITHUB_EVENT_PATH}")"
          else
            dogfood_name="sha-${GITHUB_SHA}"
          fi

          current_pmd_version=$(./mvnw --batch-mode --no-transfer-progress \
              help:evaluate -Dexpression=project.version -q -DforceStdout || echo "failed_to_determine_current_pmd_version")
          echo "Determined current pmd version: ${current_pmd_version}"

          new_version="${current_pmd_version}-dogfood-${dogfood_name}-SNAPSHOT"
          echo "::group::Set version to ${new_version}"
          ./mvnw -Dmaven.repo.local=.m2/repository \
            versions:set --quiet -DnewVersion="${new_version}" -DgenerateBackupPoms=false
          sed -i 's/<version>[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}.*<\/version>\( *<!-- pmd.dogfood.version -->\)/<version>'"${current_pmd_version}"'<\/version>\1/' pom.xml
          echo "::endgroup::"

          echo "::group::Generate settings.xml to use dogfoodStagingRepo"
          maven_settings_file="$(pwd)/target/staging/settings.xml"
          cat > "${maven_settings_file}" <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <profiles>
              <profile>
                <id>dogfood</id>
                <pluginRepositories>
                    <pluginRepository>
                        <id>dogfood</id>
                        <url>file://$(pwd)/target/staging</url>
                        <releases><enabled>true</enabled></releases>
                        <snapshots><enabled>true</enabled></snapshots>
                    </pluginRepository>
                </pluginRepositories>
              </profile>
            </profiles>
          </settings>
          EOF
          echo "new file ${maven_settings_file}:"
          cat "${maven_settings_file}"
          echo "::endgroup::"

          echo "::group::Run ./mvnw verify"
          ./mvnw --show-version --errors --batch-mode \
            --settings "${maven_settings_file}" \
            -Dmaven.repo.local=.m2/repository \
            verify \
            -PfastSkip,dogfood \
            -DskipTests \
            -Dpmd.skip=false \
            -Dcpd.skip=false
          echo "::endgroup::"

          echo "::group::Restore version to ${current_pmd_version}"
          ./mvnw -Dmaven.repo.local=.m2/repository \
            versions:set --quiet -DnewVersion="${current_pmd_version}" -DgenerateBackupPoms=false
          git checkout -- pom.xml
          echo "::endgroup::"

  documentation:
    needs: compile
    timeout-minutes: 30
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: compile-artifact
      - name: Generate rule docs
        run: |
          ./mvnw --show-version --errors --batch-mode \
            -Dmaven.repo.local=.m2/repository \
            verify \
            -Pgenerate-rule-docs,fastSkip \
            -DskipTests -Dassembly.skipAssembly=true
      - name: Set up Ruby 3.3
        uses: ruby/setup-ruby@2a7b30092b0caf9c046252510f9273b4875f3db9 #v1.254.0
        with:
          ruby-version: 3.3
      - name: Setup bundler
        run: |
          cd docs
          bundle config set --local path vendor/bundle
          bundle install
      - name: Build documentation
        run: |
          cd docs
          bundle exec jekyll build
      - name: Create Markdown formatted Release Notes
        run: |
          cd docs
          bundle exec render_release_notes.rb pages/release_notes.md | tail -n +6 > _site/pmd_release_notes.md
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: docs-artifact
          if-no-files-found: error
          path: docs/_site

  regressiontester:
    needs: compile
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 2
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Set up Ruby 3.3
        uses: ruby/setup-ruby@2a7b30092b0caf9c046252510f9273b4875f3db9 #v1.254.0
        with:
          ruby-version: 3.3
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          path: |
            ~/.m2/repository
            ~/.gradle/caches
            ~/work/pmd/target/repositories
            .ci/files/vendor/bundle
          key: regressiontester-${{ hashFiles('.ci/files/project-list.xml', '.ci/files/Gemfile.lock') }}
          restore-keys: regressiontester-
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: dist-artifact
          path: pmd-dist/target
      - name: Setup bundler
        run: |
          bundle config set --local gemfile .ci/files/Gemfile
          bundle config set --local path vendor/bundle
          bundle install
      - name: Prepare HOME/openjdk11
        run: |
          ln -sfn "${JAVA_HOME_11_X64}" "${HOME}/openjdk11"
      - name: Run pmdtester
        env:
          # this variable is available for "push" builds only, otherwise it's empty
          PMD_REGRESSION_TESTER_PUSH_BEFORE: ${{ github.event.before }}
        run: .ci/files/pmdtester_start.sh
      - name: Workaround actions/upload-artifact#176
        run: |
          echo "artifacts_path=$(realpath ..)" >> "${GITHUB_ENV}"
      - name: Upload regression tester report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: pmd-regression-tester
          if-no-files-found: error
          path: ${{ env.artifacts_path }}/target/reports/diff
