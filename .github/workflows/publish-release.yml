name: Publish Release

on:
  workflow_run:
    workflows: [Build Release]
    types:
      - completed
    branches:
      - '**'
  workflow_dispatch:

permissions:
  contents: read # to fetch code (actions/checkout)

env:
  LANG: 'en_US.UTF-8'

jobs:
  check-version:
    # only run in the official pmd/pmd repo, where we have access to the secrets and not on forks
    # and only run for _successful_ push workflow runs on tags.
    if: ${{ github.repository == 'pmd/pmd'
      && contains(fromJSON('["push", "workflow_dispatch"]'), github.event.workflow_run.event)
      && github.event.workflow_run.head_branch != 'main'
      && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    outputs:
      PMD_VERSION: ${{ steps.version.outputs.PMD_VERSION }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Determine Version
        id: version
        env:
          REF: ${{ github.event.workflow_run.head_branch }}
        run: |
          if ! git show-ref --exists "refs/tags/$REF"; then
            echo "::error ::Tag $REF does not exist, aborting."
            exit 1
          fi
          
          PMD_VERSION=$(./mvnw --batch-mode --no-transfer-progress help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Determined PMD_VERSION=$PMD_VERSION"
          if [[ "$PMD_VERSION" = *-SNAPSHOT ]]; then
            echo "::error ::PMD_VERSION=$PMD_VERSION is a snapshot version, aborting."
            exit 1
          fi
          echo "PMD_VERSION=$PMD_VERSION" >> "$GITHUB_OUTPUT"
      - name: Add Job Summary
        env:
          WORKFLOW_RUN_DISPLAY_TITLE: ${{ github.event.workflow_run.display_title }}
          WORKFLOW_RUN_NAME: ${{ github.event.workflow_run.name }}
          WORKFLOW_RUN_NUMBER: ${{ github.event.workflow_run.run_number }}
          WORKFLOW_RUN_HTML_URL: ${{ github.event.workflow_run.html_url }}
          VERSION: ${{ steps.version.outputs.PMD_VERSION }}
          TAG: ${{ github.event.workflow_run.head_branch }}
        run: |
          echo "### Run Info" >> "${GITHUB_STEP_SUMMARY}"
          echo "Building Version: ${VERSION}" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "Tag: ${TAG}" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "Called by [${WORKFLOW_RUN_DISPLAY_TITLE} (${WORKFLOW_RUN_NAME} #${WORKFLOW_RUN_NUMBER})](${WORKFLOW_RUN_HTML_URL})" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"

  deploy-to-maven-central:
    needs: [check-version]
    # use environment maven-central, where secrets are configured for MAVEN_CENTRAL_PORTAL_*
    environment:
      name: maven-central
      url: https://repo.maven.apache.org/maven2/net/sourceforge/pmd/
    runs-on: ubuntu-latest
    timeout-minutes: 180
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: compile-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Build and publish
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_PORTAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PORTAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        # note: we can't use artifact staging-repository, as the jars are unsigned and javadoc+sources are missing.
        run: |
          ./mvnw --show-version --errors --batch-mode \
            deploy \
            -DskipTests \
            -PfastSkip,sign,pmd-release \
            -Dcyclonedx.skip=false \
            -Dmaven.javadoc.skip=false \
            -Ddokka.skip=false \
            -Dmaven.source.skip=false

  deploy-to-sourceforge-files:
    needs: [check-version, deploy-to-maven-central]
    # use environment sourceforge, where secrets/vars are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    # and PMD_WEB_SOURCEFORGE_NET_KNOWN_HOSTS and PMD_SF_APIKEY
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: dist-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: dist

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup GPG
        env:
          PMD_CI_GPG_PRIVATE_KEY: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
        run: |
          mkdir -p "${HOME}/.gpg"
          chmod 700 "${HOME}/.gpg"
          printenv PMD_CI_GPG_PRIVATE_KEY | gpg --batch --import

          gpg --list-keys --fingerprint --keyid-format=long
          gpg --list-secret-keys --fingerprint --keyid-format=long

      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
          WEB_SF_KNOWN_HOSTS: ${{ vars.PMD_WEB_SOURCEFORGE_NET_KNOWN_HOSTS }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          echo "${WEB_SF_KNOWN_HOSTS}" > "$HOME/.ssh/known_hosts"

      - name: Create docs zip
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          mv docs "pmd-doc-${PMD_VERSION}"
          zip -qr "dist/pmd-dist-${PMD_VERSION}-doc.zip" "pmd-doc-${PMD_VERSION}/"

      - name: Sign files
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        run: |
          cd dist
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-bin.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-src.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-doc.zip"

      - name: Upload to sourceforge
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          # Deploy to sourceforge files https://sourceforge.net/projects/pmd/files/pmd/
          basePath="pmd/${PMD_VERSION}"
          uploadUrl="adangel@web.sourceforge.net:/home/frs/project/pmd/${basePath}"

          rsync -avh "dist/pmd-dist-${PMD_VERSION}-bin.zip"        "${uploadUrl}/"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-bin.zip.asc"    "${uploadUrl}/"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-src.zip"        "${uploadUrl}/"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-src.zip.asc"    "${uploadUrl}/"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-doc.zip"        "${uploadUrl}/"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-doc.zip.asc"    "${uploadUrl}/"
          rsync -avh "dist/pmd-${PMD_VERSION}-cyclonedx.xml"       "${uploadUrl}/"
          rsync -avh "dist/pmd-${PMD_VERSION}-cyclonedx.json"      "${uploadUrl}/"
          rsync -avh "pmd-doc-${PMD_VERSION}/pmd_release_notes.md" "${uploadUrl}/ReadMe.md"

          targetUrl="https://sourceforge.net/projects/pmd/files/${basePath}"
          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Select latest release as default on sourceforge
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_SF_APIKEY: ${{ secrets.PMD_SF_APIKEY }}
        run: |
          #
          # Select the given version as the new default download.
          #
          # https://sourceforge.net/p/forge/documentation/Using%20the%20Release%20API/
          # https://sourceforge.net/projects/pmd/best_release.json
          #
          curl -H "Accept: application/json" \
              -X PUT \
              -d "api_key=${PMD_SF_APIKEY}" \
              -d "default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others" \
              "https://sourceforge.net/projects/pmd/files/pmd/${PMD_VERSION}/pmd-dist-${PMD_VERSION}-bin.zip"

      - name: Cleanup ssh and gpg
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"
          rm -rf "${HOME}/.gpg"

  deploy-to-sourceforge-io:
    needs: [check-version, deploy-to-maven-central]
    # use environment sourceforge, where secrets/vars are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    # and PMD_WEB_SOURCEFORGE_NET_KNOWN_HOSTS
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
          WEB_SF_KNOWN_HOSTS: ${{ vars.PMD_WEB_SOURCEFORGE_NET_KNOWN_HOSTS }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          echo "${WEB_SF_KNOWN_HOSTS}" > "$HOME/.ssh/known_hosts"

      - name: Upload to sourceforge
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          rsync -ah --stats --delete "docs/" "adangel@web.sourceforge.net:/home/project-web/pmd/htdocs/pmd-${PMD_VERSION}/"
          echo "url_output=https://pmd.sourceforge.io/pmd-${PMD_VERSION}/" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  deploy-to-pmd-code-doc:
    needs: [check-version, deploy-to-maven-central]
    # use environment pmd-code, where secrets/vars are configured for PMD_CODE_ORG_DEPLOY_KEY
    # and PMD_CODE_ORG_KNOWN_HOSTS
    environment:
      name: pmd-code
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup ssh key for pmd-code
        env:
          PMD_CODE_ORG_DEPLOY_KEY: ${{ secrets.PMD_CODE_ORG_DEPLOY_KEY }}
          PMD_CODE_ORG_KNOWN_HOSTS: ${{ vars.PMD_CODE_ORG_KNOWN_HOSTS }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv PMD_CODE_ORG_DEPLOY_KEY > "${HOME}/.ssh/pmd-code.org_deploy_key"
          chmod 600 "${HOME}/.ssh/pmd-code.org_deploy_key"
          echo "
          Host pmd-code.org
              IdentityFile=$HOME/.ssh/pmd-code.org_deploy_key
          " > "$HOME/.ssh/config"
          echo "${PMD_CODE_ORG_KNOWN_HOSTS}" > "$HOME/.ssh/known_hosts"

      - name: Create docs zip
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          mv docs "pmd-doc-${PMD_VERSION}"
          zip -qr "pmd-dist-${PMD_VERSION}-doc.zip" "pmd-doc-${PMD_VERSION}/"

      - name: Upload to pmd-code.org
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_CODE_SSH_USER: pmd
          PMD_CODE_DOCS_PATH: /docs.pmd-code.org/
        run: |
          filename="pmd-dist-${PMD_VERSION}-doc.zip"
          
          scp "${filename}" ${PMD_CODE_SSH_USER}@pmd-code.org:${PMD_CODE_DOCS_PATH}
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                  rm -rf \"pmd-doc-${PMD_VERSION}\" && \
                  unzip -qo \"${filename}\" && \
                  rm \"${filename}\""

          # only for release builds: https://docs.pmd-code.org/latest -> pmd-doc-${PMD_VERSION}
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                  rm -f \"latest\" && \
                  ln -s \"pmd-doc-${PMD_VERSION}\" \"latest\""

          targetUrl="https://docs.pmd-code.org/pmd-doc-${PMD_VERSION}/"
          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

          # remove old snapshot doc and point to the new version
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                  rm -rf \"pmd-doc-${PMD_VERSION}-SNAPSHOT/\" && \
                  ln -s \"pmd-doc-${PMD_VERSION}\" \"pmd-doc-${PMD_VERSION}-SNAPSHOT\""
          echo "Symlink created: https://docs.pmd-code.org/pmd-doc-${PMD_VERSION}-SNAPSHOT/ -> https://docs.pmd-code.org/pmd-doc-${PMD_VERSION}/"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  deploy-to-pmd-code-javadoc:
    needs: [check-version, deploy-to-maven-central]
    # use environment pmd-code, where secrets/vars are configured for PMD_CODE_ORG_DEPLOY_KEY
    # and PMD_CODE_ORG_KNOWN_HOSTS
    environment:
      name: pmd-code
      url: https://docs.pmd-code.org/apidocs/
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: javadocs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Setup ssh key for pmd-code
        env:
          PMD_CODE_ORG_DEPLOY_KEY: ${{ secrets.PMD_CODE_ORG_DEPLOY_KEY }}
          PMD_CODE_ORG_KNOWN_HOSTS: ${{ vars.PMD_CODE_ORG_KNOWN_HOSTS }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv PMD_CODE_ORG_DEPLOY_KEY > "${HOME}/.ssh/pmd-code.org_deploy_key"
          chmod 600 "${HOME}/.ssh/pmd-code.org_deploy_key"
          echo "
          Host pmd-code.org
              IdentityFile=$HOME/.ssh/pmd-code.org_deploy_key
          " > "$HOME/.ssh/config"
          echo "${PMD_CODE_ORG_KNOWN_HOSTS}" > "$HOME/.ssh/known_hosts"

      - name: Upload javadocs to pmd-code.org
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_CODE_SSH_USER: pmd
          PMD_CODE_DOCS_PATH: /docs.pmd-code.org/
        run: |
          for moduleJavadocJar in */target/*-javadoc.jar */*/target/*-javadoc.jar; do
              moduleJavadocJarBasename="$(basename "$moduleJavadocJar")"
              module=${moduleJavadocJarBasename%%-${PMD_VERSION}-javadoc.jar}
          
              echo "Copying module ${moduleJavadocJar}..."
              scp "$moduleJavadocJar" ${PMD_CODE_SSH_USER}@pmd-code.org:${PMD_CODE_DOCS_PATH}
              echo "Extracting remotely ${module}..."
              # shellcheck disable=SC2029
              ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                      rm -rf \"apidocs/${module}/${PMD_VERSION}\" && \
                      mkdir -p \"apidocs/${module}/${PMD_VERSION}\" && \
                      unzip -qo -d \"apidocs/${module}/${PMD_VERSION}\" \"${moduleJavadocJarBasename}\" && \
                      rm \"${moduleJavadocJarBasename}\""
          done

          # remove old snapshot javadoc
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                rm -rf apidocs/*/\"${PMD_VERSION}-SNAPSHOT\""
          
          # create a symlink from SNAPSHOT to released version
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                for i in apidocs/*/\"${PMD_VERSION}\"; do \
                  ln -s \"${PMD_VERSION}\" \"\$i-SNAPSHOT\"; \
                done"
          
          # (re)create a symlink from latest to released version
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                for i in apidocs/*/\"${PMD_VERSION}\"; do \
                  ln -snf \"${PMD_VERSION}\" \"\${i%%${PMD_VERSION}}latest\"; \
                done"

          echo "(Re)creating .htaccess"
          # make sure https://docs.pmd-code.org/apidocs/ shows directory index
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}/apidocs\" && \
              echo 'Options +Indexes' > .htaccess"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  github-release:
    needs: [check-version, deploy-to-maven-central]
    environment:
      name: github
      url: ${{ steps.release.outputs.release_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: dist-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: dist

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup GPG
        env:
          PMD_CI_GPG_PRIVATE_KEY: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
        run: |
          mkdir -p "${HOME}/.gpg"
          chmod 700 "${HOME}/.gpg"
          printenv PMD_CI_GPG_PRIVATE_KEY | gpg --batch --import

          gpg --list-keys --fingerprint --keyid-format=long
          gpg --list-secret-keys --fingerprint --keyid-format=long
      - name: Create docs zip
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          mv docs "pmd-doc-${PMD_VERSION}"
          zip -qr "dist/pmd-dist-${PMD_VERSION}-doc.zip" "pmd-doc-${PMD_VERSION}/"

      - name: Sign files
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        run: |
          cd dist
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-bin.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-src.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-doc.zip"
      - uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e #v2.0.6
        id: pmd-actions-helper-app-token
        with:
          app-id: ${{ secrets.PMD_ACTIONS_HELPER_ID }}
          private-key: ${{ secrets.PMD_ACTIONS_HELPER_PRIVATE_KEY }}
          owner: pmd
          repositories: pmd
          permission-contents: write # create a release
      - name: Delete old GitHub Pre-Release
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          GH_TOKEN: ${{ steps.pmd-actions-helper-app-token.outputs.token }}
        run: |
          tagName="pmd_releases/${PMD_VERSION}-SNAPSHOT"
          existingTagName="$(gh --repo pmd/pmd release list --json tagName,isPrerelease --jq ".[] | select(.tagName == \"${tagName}\" and .isPrerelease == true) | .tagName")"
          
          if [ "${existingTagName}" = "${tagName}" ]; then
            echo "Pre-release for tag ${tagName} exists - deleting it..."
            gh release delete "${tagName}" \
              --repo pmd/pmd \
              --cleanup-tag \
              --yes
          else
            echo "No pre-release ${tagName} exists, nothing to delete"
          fi
      - name: Create GitHub Release
        id: release
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          GH_TOKEN: ${{ steps.pmd-actions-helper-app-token.outputs.token }}
        run: |
          release_name="PMD ${PMD_VERSION} ($(date -u +%d-%B-%Y))"
          gh release create "pmd_releases/${PMD_VERSION}" \
            --repo pmd/pmd \
            --verify-tag \
            --title "$release_name" \
            --notes-file "pmd-doc-${PMD_VERSION}/pmd_release_notes.md" \
              "dist/pmd-dist-${PMD_VERSION}-bin.zip" \
              "dist/pmd-dist-${PMD_VERSION}-bin.zip.asc" \
              "dist/pmd-dist-${PMD_VERSION}-src.zip" \
              "dist/pmd-dist-${PMD_VERSION}-src.zip.asc" \
              "dist/pmd-dist-${PMD_VERSION}-doc.zip" \
              "dist/pmd-dist-${PMD_VERSION}-doc.zip.asc" \
              "dist/pmd-${PMD_VERSION}-cyclonedx.xml" \
              "dist/pmd-${PMD_VERSION}-cyclonedx.json"
          echo "release_url=https://github.com/pmd/pmd/releases/tag/pmd_releases%2F${PMD_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Cleanup gpg
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.gpg"

  create-sourceforge-blog-post:
    needs: [check-version, deploy-to-maven-central]
    # use environment sourceforge, where secrets/vars are configured for PMD_SF_BEARER_TOKEN
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Create blog post
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_SF_BEARER_TOKEN: ${{ secrets.PMD_SF_BEARER_TOKEN }}
        run: |
          rendered_release_notes="$(cat docs/pmd_release_notes.md)"
          echo "
          *   Downloads: https://github.com/pmd/pmd/releases/tag/pmd_releases%2F${PMD_VERSION}
          *   Documentation: https://docs.pmd-code.org/pmd-doc-${PMD_VERSION}/
        
          ${rendered_release_notes}" > docs/pmd_release_notes.md
          release_name="PMD ${PMD_VERSION} ($(date -u +%d-%B-%Y)) released"

          # See https://sourceforge.net/p/forge/documentation/Allura%20API/
          curl --request POST \
            --header "Authorization: Bearer ${PMD_SF_BEARER_TOKEN}" \
            --form "labels=pmd,release" \
            --form "state=published" \
            --form "text=<docs/pmd_release_notes.md" \
            --form "title=$release_name" \
            https://sourceforge.net/rest/p/pmd/news
          
          # https://sourceforge.net/p/pmd/news/2025/05/pmd-7140-30-may-2025-released/
          # reconstruct the final blog url
          news_title="${release_name}"
          news_title="${news_title// /-}"
          news_title="${news_title//\./}"
          news_title="${news_title//\(/}"
          news_title="${news_title//\)/}"
          news_title="${news_title,,}" # convert to lowercase
          targetUrl="https://sourceforge.net/p/pmd/news/$(date -u +%Y)/$(date -u +%m)/${news_title// /_}"
          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

  create-regression-tester-baseline:
    needs: [check-version, deploy-to-maven-central]
    # use environment pmd-code, where secrets/vars are configured for PMD_CODE_ORG_DEPLOY_KEY
    # and PMD_CODE_ORG_KNOWN_HOSTS
    environment:
      name: pmd-code
      url: https://pmd-code.org/pmd-regression-tester/
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 #v4.7.1
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Set up Ruby 3.3
        uses: ruby/setup-ruby@2a7b30092b0caf9c046252510f9273b4875f3db9 #v1.254.0
        with:
          ruby-version: 3.3
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          path: |
            ~/.m2/repository
            ~/.gradle/caches
            ~/work/pmd/target/repositories
            .ci/files/vendor/bundle
          key: regressiontester-${{ hashFiles('.ci/files/project-list.xml', '.ci/files/Gemfile.lock') }}
          restore-keys: regressiontester-
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: dist-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: pmd-dist/target
      - name: Setup bundler
        run: |
          bundle config set --local gemfile .ci/files/Gemfile
          bundle config set --local path vendor/bundle
          bundle install
      - name: Prepare HOME/openjdk11
        run: |
          ln -sfn "${JAVA_HOME_11_X64}" "${HOME}/openjdk11"
      - name: Run pmdtester
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          cd ..
          rm -f .bundle/config
          bundle config set --local gemfile pmd/.ci/files/Gemfile
          bundle config set --local path vendor/bundle
          bundle exec pmdtester \
              --mode single \
              --local-git-repo ./pmd \
              --patch-branch "pmd_releases/${PMD_VERSION}" \
              --patch-config ./pmd/.ci/files/all-regression-rules.xml \
              --list-of-project ./pmd/.ci/files/project-list.xml --html-flag \
              --threads "$(nproc)" \
              --error-recovery
          pushd target/reports || { echo "Directory 'target/reports' doesn't exist"; exit 1; }
      - name: Setup ssh key for pmd-code
        env:
          PMD_CODE_ORG_DEPLOY_KEY: ${{ secrets.PMD_CODE_ORG_DEPLOY_KEY }}
          PMD_CODE_ORG_KNOWN_HOSTS: ${{ vars.PMD_CODE_ORG_KNOWN_HOSTS }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv PMD_CODE_ORG_DEPLOY_KEY > "${HOME}/.ssh/pmd-code.org_deploy_key"
          chmod 600 "${HOME}/.ssh/pmd-code.org_deploy_key"
          echo "
          Host pmd-code.org
              IdentityFile=$HOME/.ssh/pmd-code.org_deploy_key
          " > "$HOME/.ssh/config"
          echo "${PMD_CODE_ORG_KNOWN_HOSTS}" > "$HOME/.ssh/known_hosts"
      - name: Upload baseline
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          cd ../target/reports
          baseline_name="pmd_releases_${PMD_VERSION}"
          zip -q -r "${baseline_name}-baseline.zip" "${baseline_name}/"
          cd ../../pmd
          mv ../target/reports/"${baseline_name}-baseline.zip" .
          scp "${baseline_name}-baseline.zip" pmd@pmd-code.org:/httpdocs/pmd-regression-tester/
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: regression-tester-baseline
          path: ${{ format('pmd_releases_{0}-baseline.zip', needs.check-version.outputs.PMD_VERSION) }}
      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  upload-regression-tester-baseline-sourceforge:
    needs: [check-version, deploy-to-maven-central, create-regression-tester-baseline]
    # use environment sourceforge, where secrets/vars are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    # and PMD_WEB_SOURCEFORGE_NET_KNOWN_HOSTS and PMD_SF_APIKEY
    environment:
      name: sourceforge
      url: https://sourceforge.net/projects/pmd/files/pmd-regression-tester/
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
          WEB_SF_KNOWN_HOSTS: ${{ vars.PMD_WEB_SOURCEFORGE_NET_KNOWN_HOSTS }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          echo "${WEB_SF_KNOWN_HOSTS}" > "$HOME/.ssh/known_hosts"
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: regression-tester-baseline
      - name: Upload to sourceforge
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          uploadUrl="adangel@web.sourceforge.net:/home/frs/project/pmd/pmd-regression-tester/"
          rsync -avh "pmd_releases_${PMD_VERSION}-baseline.zip" "${uploadUrl}"
      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  create-docker:
    needs: [check-version, github-release]
    environment:
      name: github
      url: https://github.com/pmd/docker/actions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e #v2.0.6
        id: pmd-actions-helper-app-token
        with:
          app-id: ${{ secrets.PMD_ACTIONS_HELPER_ID }}
          private-key: ${{ secrets.PMD_ACTIONS_HELPER_PRIVATE_KEY }}
          owner: pmd
          repositories: docker
          permission-actions: write
      - name: Trigger docker build
        env:
          GH_TOKEN: ${{ steps.pmd-actions-helper-app-token.outputs.token }}
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          # split semantic version by dot
          IFS="." read -ra VERSION_ARRAY <<< "${PMD_VERSION}"
          all_tags=""
          new_tag=""
          for i in "${VERSION_ARRAY[@]}"; do
            if [ -z "$new_tag" ]; then
              new_tag="${i}"
            else
              new_tag="${new_tag}.${i}"
            fi
            all_tags="${all_tags}${new_tag},"
          done
          all_tags="${all_tags}latest"
          echo "version: ${PMD_VERSION}"
          echo "tags: ${all_tags}"

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/pmd/docker/actions/workflows/publish-docker-image.yaml/dispatches \
            -f "ref=main" -f "inputs[version]=${PMD_VERSION}" -f "inputs[tags]=${all_tags}"
